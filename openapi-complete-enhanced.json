{
  "openapi": "3.0.0",
  "info": {
    "title": "Task Management System API - Complete with Enhanced Log Filtering",
    "version": "1.0.0",
    "description": "A comprehensive RESTful API for managing tasks with soft delete capabilities, comprehensive logging, and advanced filtering features. Built with Lumen framework for high performance. Includes enhanced log filtering documentation with all available parameters and validation rules.",
    "contact": {
      "email": "admin@taskmanagement.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000/api/v1",
      "description": "Development API Server (Versioned)"
    },
    {
      "url": "http://localhost:8000",
      "description": "Development API Server (Legacy Routes)"
    }
  ],
  "paths": {
    "/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get all tasks",
        "description": "Retrieve a paginated list of tasks with optional filtering",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of tasks per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Tasks retrieved successfully"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a new task",
        "description": "Create a new task with comprehensive validation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Task"
                    },
                    "message": {
                      "type": "string",
                      "example": "Task created successfully"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/logs": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get system logs with advanced filtering",
        "description": "Retrieve system activity logs with comprehensive filtering and pagination options. Supports multiple filter types including date ranges, log levels, actions, and user/task associations. Built for high-performance querying with MongoDB backend.",
        "operationId": "getLogs",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Must be a positive integer starting from 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "example": 1
          },
          {
            "name": "limit",
            "in": "query", 
            "description": "Number of logs per page. Controls the page size for pagination. Maximum 1000 entries per request to prevent performance issues.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 50
            },
            "example": 50
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filter by action type. Supports all task lifecycle actions including CRUD operations, soft deletes, and bulk operations. Use this to track specific types of activities.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated", 
                "deleted",
                "restored",
                "soft_delete",
                "force_delete",
                "bulk_update",
                "status_change",
                "assignment_change",
                "metadata_update"
              ],
              "maxLength": 100
            },
            "example": "created"
          },
          {
            "name": "task_id",
            "in": "query",
            "description": "Filter by specific task ID to get all logs related to that task. Useful for tracking the complete history of a single task.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user ID to get all logs for actions performed by a specific user. Enables user activity tracking and audit trails.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "example": 456
          },
          {
            "name": "level",
            "in": "query",
            "description": "Filter by log level. Use 'error' for debugging issues, 'warning' for potential problems, 'info' for general activity, and 'debug' for detailed troubleshooting.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["info", "warning", "error", "debug"],
              "maxLength": 10
            },
            "example": "info"
          },
          {
            "name": "source",
            "in": "query",
            "description": "Filter by log source component. Identifies which part of the system generated the log entry (e.g., controller, service, middleware).",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 100
            },
            "example": "TaskController"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date for filtering logs. Must be in YYYY-MM-DD HH:MM:SS format. If provided with end_date, creates a date range filter. Cannot be greater than end_date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$"
            },
            "example": "2024-01-01 00:00:00"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date for filtering logs. Must be in YYYY-MM-DD HH:MM:SS format. When used with start_date, creates a date range filter. Must be greater than start_date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$"
            },
            "example": "2024-12-31 23:59:59"
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Field to sort the logs by. Controls the primary ordering of results. 'created_at' is recommended for chronological views, 'level' for debugging.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created_at", "action", "task_id", "user_id", "level"],
              "default": "created_at"
            },
            "example": "created_at"
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order for the logs. 'desc' (descending) shows newest first, 'asc' (ascending) shows oldest first. Recommended to use 'desc' for recent activity monitoring.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            },
            "example": "desc"
          },
          {
            "name": "include_metadata",
            "in": "query",
            "description": "Include response metadata such as pagination info, query statistics, and filtering summaries. Useful for building rich UI components.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true
          },
          {
            "name": "include_technical",
            "in": "query",
            "description": "Include technical details like query execution time, database performance metrics, and system information. Mainly for debugging and performance monitoring.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": false
          },
          {
            "name": "include_changes",
            "in": "query", 
            "description": "Include detailed change information showing before/after values for update operations. Essential for audit trails and change tracking.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true
          },
          {
            "name": "date_format",
            "in": "query",
            "description": "Format for date fields in the response. 'iso8601' is recommended for API consumers, 'human' for user interfaces, 'rfc2822' for email-style dates.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["iso8601", "rfc2822", "human"],
              "default": "iso8601"
            },
            "example": "iso8601"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Get a specific log entry by its unique ID. When provided, other filtering parameters are ignored and a single log is returned.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "674f1b123456789abcdef012"
          }
        ],
        "responses": {
          "200": {
            "description": "Logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogListResponse"
                }
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of logs matching the filter criteria",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Page": {
                "description": "Current page number in the pagination",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Number of logs returned per page",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Total number of pages available",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Applied-Filters": {
                "description": "JSON array of filter names that were applied to the query",
                "schema": {
                  "type": "string"
                }
              },
              "X-Query-Execution-Time": {
                "description": "Query execution time in milliseconds for performance monitoring",
                "schema": {
                  "type": "string"
                }
              },
              "X-Sort-By": {
                "description": "Field used for sorting the results",
                "schema": {
                  "type": "string"
                }
              },
              "X-Sort-Order": {
                "description": "Sort order applied (asc or desc)",
                "schema": {
                  "type": "string"
                }
              },
              "X-Date-Range": {
                "description": "Applied date range filter in ISO format",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid filter parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Log not found (when using id parameter)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error - Invalid parameter values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Task": {
        "type": "object",
        "required": ["id", "title", "status", "created_at", "updated_at"],
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Task ID"
          },
          "title": {
            "type": "string",
            "example": "Complete project documentation",
            "description": "Task title"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Write comprehensive documentation for the project",
            "description": "Task description"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed", "cancelled"],
            "example": "pending",
            "description": "Task status"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "urgent"],
            "example": "medium",
            "description": "Task priority"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-01T09:00:00Z",
            "description": "Task creation date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-15T14:30:00Z",
            "description": "Task last update date"
          }
        }
      },
      "TaskCreateRequest": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 255,
            "example": "Complete project documentation",
            "description": "Task title (required)"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Write comprehensive documentation for the project",
            "description": "Task description"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed", "cancelled"],
            "example": "pending",
            "description": "Task status (defaults to 'pending')"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "urgent"],
            "example": "medium",
            "description": "Task priority (defaults to 'medium')"
          }
        }
      },
      "LogListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "timestamp": {
            "type": "string", 
            "format": "date-time",
            "example": "2024-12-01T15:30:45Z"
          },
          "message": {
            "type": "string",
            "example": "Logs retrieved successfully"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogEntry"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/LogResponseMeta"
          }
        }
      },
      "LogEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique log entry identifier",
            "example": "674f1b123456789abcdef012"
          },
          "task_id": {
            "type": "integer",
            "description": "ID of the task this log relates to",
            "example": 123
          },
          "action": {
            "type": "string",
            "description": "Action that was performed",
            "example": "created"
          },
          "user_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the user who performed the action",
            "example": 456
          },
          "level": {
            "type": "string",
            "description": "Log level",
            "enum": ["info", "warning", "error", "debug"],
            "example": "info"
          },
          "source": {
            "type": "string",
            "nullable": true,
            "description": "Source component that generated the log",
            "example": "TaskController"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Human-readable description of the action",
            "example": "Task created with title 'Complete project documentation'"
          },
          "data": {
            "type": "object",
            "description": "Additional data associated with the log entry",
            "example": {
              "old_data": {},
              "new_data": {
                "title": "Complete project documentation",
                "status": "pending"
              },
              "changes": ["title", "status"],
              "change_count": 2
            }
          },
          "ip_address": {
            "type": "string",
            "nullable": true,
            "description": "IP address of the client that made the request",
            "example": "192.168.1.100"
          },
          "user_agent": {
            "type": "string",
            "nullable": true,
            "description": "User agent string of the client",
            "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the log entry was created",
            "example": "2024-12-01T15:30:45Z"
          }
        }
      },
      "LogResponseMeta": {
        "type": "object",
        "properties": {
          "pagination": {
            "type": "object",
            "properties": {
              "current_page": {
                "type": "integer",
                "example": 1
              },
              "per_page": {
                "type": "integer", 
                "example": 50
              },
              "total": {
                "type": "integer",
                "example": 1250
              },
              "last_page": {
                "type": "integer",
                "example": 25
              },
              "from": {
                "type": "integer",
                "example": 1
              },
              "to": {
                "type": "integer",
                "example": 50
              },
              "has_next_page": {
                "type": "boolean",
                "example": true
              },
              "has_previous_page": {
                "type": "boolean",
                "example": false
              }
            }
          },
          "statistics": {
            "type": "object",
            "properties": {
              "total_actions": {
                "type": "object",
                "description": "Count of each action type in the filtered results"
              },
              "date_range": {
                "type": "object",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string", 
                    "format": "date-time"
                  }
                }
              },
              "unique_users": {
                "type": "integer",
                "description": "Number of unique users in the filtered results"
              },
              "unique_tasks": {
                "type": "integer",
                "description": "Number of unique tasks in the filtered results"
              }
            }
          },
          "applied_filters": {
            "type": "object",
            "description": "Filter parameters that were applied to the query"
          },
          "query_metadata": {
            "type": "object",
            "properties": {
              "sort_by": {
                "type": "string",
                "example": "created_at"
              },
              "sort_order": {
                "type": "string",
                "example": "desc"
              },
              "execution_time": {
                "type": "number",
                "description": "Query execution time in milliseconds",
                "example": 15.23
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string",
            "example": "An error occurred"
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "LOG_RETRIEVAL_ERROR"
              },
              "details": {
                "type": "string",
                "example": "Failed to retrieve logs due to database connection issue"
              }
            }
          }
        }
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string",
            "example": "Validation failed"
          },
          "errors": {
            "type": "object",
            "description": "Field-specific validation errors",
            "example": {
              "start_date": ["The start date must be a valid date in YYYY-MM-DD HH:MM:SS format"],
              "end_date": ["The end date must be after the start date"],
              "limit": ["The limit must be between 1 and 1000"]
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Tasks",
      "description": "Task management operations with comprehensive CRUD functionality"
    },
    {
      "name": "Logs",
      "description": "Activity logging and audit trail operations. Comprehensive logging system for tracking all task-related activities with advanced filtering capabilities."
    }
  ]
}