{
  "openapi": "3.0.0",
  "info": {
    "title": "Task Management System API",
    "version": "1.0.0",
    "description": "A comprehensive RESTful API for managing tasks with soft delete capabilities, comprehensive logging, and advanced filtering features. Built with Lumen framework for high performance and scalability.",
    "termsOfService": "https://api.taskmanagement.com/terms",
    "contact": {
      "name": "API Support Team",
      "email": "api-support@taskmanagement.com",
      "url": "https://api.taskmanagement.com/support"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000/api/v1",
      "description": "Local Development Server"
    },
    {
      "url": "https://api.taskmanagement.com/v1",
      "description": "Production API Server"
    },
    {
      "url": "https://staging-api.taskmanagement.com/v1",
      "description": "Staging API Server"
    }
  ],
  "externalDocs": {
    "description": "API Documentation Wiki",
    "url": "https://docs.taskmanagement.com"
  },
  "paths": {
    "/": {
      "get": {
        "tags": ["System"],
        "summary": "API Overview",
        "description": "Get API overview with available endpoints and features",
        "responses": {
          "200": {
            "description": "API overview retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiOverviewResponse"
                },
                "example": {
                  "message": "Task Management System API",
                  "version": "1.0.0",
                  "api_version": "v1.0",
                  "status": "active",
                  "environment": "local",
                  "timestamp": "2024-12-21T10:30:00Z",
                  "documentation": {
                    "main": "http://localhost:8000/api/v1/docs",
                    "info": "http://localhost:8000/api/v1/info",
                    "openapi": "http://localhost:8000/api/v1/openapi.json"
                  },
                  "endpoints": {
                    "api_v1": {
                      "tasks": "http://localhost:8000/api/v1/tasks",
                      "logs": "http://localhost:8000/api/v1/logs"
                    },
                    "legacy": {
                      "tasks": "http://localhost:8000/tasks",
                      "logs": "http://localhost:8000/logs"
                    }
                  },
                  "features": [
                    "versioned_api",
                    "soft_deletes",
                    "audit_logging",
                    "filtering_pagination",
                    "validation"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["System"],
        "summary": "Health Check",
        "description": "Check API health status and service availability",
        "responses": {
          "200": {
            "description": "System is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                },
                "example": {
                  "status": "healthy",
                  "timestamp": "2024-12-21T10:30:00Z",
                  "services": {
                    "database": "connected",
                    "mongodb": "connected"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get all tasks",
        "description": "Retrieve a paginated list of tasks with optional filtering",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of tasks per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by task status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["pending", "in_progress", "completed", "cancelled"]
            }
          },
          {
            "name": "priority",
            "in": "query",
            "description": "Filter by task priority",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["low", "medium", "high", "urgent"]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search in task title and description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Sort field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["id", "title", "status", "priority", "created_at", "updated_at"],
              "default": "created_at"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListResponse"
                },
                "example": {
                  "success": true,
                  "timestamp": "2024-12-21T10:30:00Z",
                  "message": "Tasks retrieved successfully",
                  "data": [
                    {
                      "id": 1,
                      "title": "Complete project documentation",
                      "description": "Write comprehensive documentation for the task management system",
                      "status": "in_progress",
                      "priority": "high",
                      "assigned_to": null,
                      "created_by": null,
                      "due_date": "2024-12-25T00:00:00Z",
                      "completed_at": null,
                      "created_at": "2024-12-20T09:00:00Z",
                      "updated_at": "2024-12-21T08:30:00Z",
                      "deleted_at": null
                    },
                    {
                      "id": 2,
                      "title": "Review code changes",
                      "description": "Review and approve pending pull requests",
                      "status": "pending",
                      "priority": "medium",
                      "assigned_to": null,
                      "created_by": null,
                      "due_date": null,
                      "completed_at": null,
                      "created_at": "2024-12-21T10:00:00Z",
                      "updated_at": "2024-12-21T10:00:00Z",
                      "deleted_at": null
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "current_page": 1,
                      "per_page": 50,
                      "total": 2,
                      "total_pages": 1,
                      "has_next_page": false,
                      "has_previous_page": false,
                      "next_page": null,
                      "previous_page": null
                    },
                    "applied_filters": {
                      "status": null,
                      "priority": null,
                      "search": null
                    },
                    "data_type": "collection",
                    "data_count": 2
                  }
                }
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of tasks",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Page": {
                "description": "Current page number",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Items per page",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid filter parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "timestamp": "2024-12-21T10:30:00Z",
                  "error": "Invalid filter parameters",
                  "message": "The provided filter parameters are not valid",
                  "details": {
                    "status": ["The status field must be one of: pending, in_progress, completed, cancelled"]
                  },
                  "code": "INVALID_FILTERS"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "timestamp": "2024-12-21T10:30:00Z",
                  "error": "Internal server error",
                  "message": "An unexpected error occurred while retrieving tasks",
                  "details": {},
                  "code": "INTERNAL_ERROR"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a new task",
        "description": "Create a new task with comprehensive validation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreateRequest"
              },
              "example": {
                "title": "Complete project documentation",
                "description": "Write comprehensive documentation for the task management system",
                "status": "pending",
                "priority": "high",
                "due_date": "2024-12-25"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                },
                "example": {
                  "success": true,
                  "timestamp": "2024-12-21T10:30:00Z",
                  "message": "Task created successfully",
                  "data": {
                    "id": 3,
                    "title": "Complete project documentation",
                    "description": "Write comprehensive documentation for the task management system",
                    "status": "pending",
                    "priority": "high",
                    "assigned_to": null,
                    "created_by": null,
                    "due_date": "2024-12-25T00:00:00Z",
                    "completed_at": null,
                    "created_at": "2024-12-21T10:30:00Z",
                    "updated_at": "2024-12-21T10:30:00Z",
                    "deleted_at": null
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "example": {
                  "success": false,
                  "timestamp": "2024-12-21T10:30:00Z",
                  "error": "Validation failed",
                  "message": "The given data was invalid",
                  "details": {
                    "title": ["The title field is required."],
                    "status": ["The status field must be one of: pending, in_progress, completed, cancelled."]
                  },
                  "code": "VALIDATION_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get a specific task",
        "description": "Retrieve a specific task by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                },
                "example": {
                  "success": true,
                  "timestamp": "2024-12-21T10:30:00Z",
                  "message": "Task retrieved successfully",
                  "data": {
                    "id": 1,
                    "title": "Complete project documentation",
                    "description": "Write comprehensive documentation for the task management system",
                    "status": "in_progress",
                    "priority": "high",
                    "assigned_to": null,
                    "created_by": null,
                    "due_date": "2024-12-25T00:00:00Z",
                    "completed_at": null,
                    "created_at": "2024-12-20T09:00:00Z",
                    "updated_at": "2024-12-21T08:30:00Z",
                    "deleted_at": null
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "timestamp": "2024-12-21T10:30:00Z",
                  "error": "Task not found",
                  "message": "The requested task with ID 999 was not found",
                  "details": {
                    "task_id": 999
                  },
                  "code": "TASK_NOT_FOUND"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update a task (full update)",
        "description": "Update a task with all fields (missing fields will be set to defaults)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskUpdateRequest"
              },
              "example": {
                "title": "Complete project documentation - Updated",
                "description": "Write comprehensive documentation for the task management system with examples",
                "status": "in_progress",
                "priority": "urgent",
                "due_date": "2024-12-23"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                },
                "example": {
                  "success": true,
                  "timestamp": "2024-12-21T10:30:00Z",
                  "message": "Task updated successfully",
                  "data": {
                    "id": 1,
                    "title": "Complete project documentation - Updated",
                    "description": "Write comprehensive documentation for the task management system with examples",
                    "status": "in_progress",
                    "priority": "urgent",
                    "assigned_to": null,
                    "created_by": null,
                    "due_date": "2024-12-23T00:00:00Z",
                    "completed_at": null,
                    "created_at": "2024-12-20T09:00:00Z",
                    "updated_at": "2024-12-21T10:30:00Z",
                    "deleted_at": null
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Tasks"],
        "summary": "Update a task (partial update)",
        "description": "Update specific fields of a task (preferred method for updates)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskPatchRequest"
              },
              "example": {
                "status": "completed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Soft delete a task",
        "description": "Soft delete a task (can be restored later)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "example": {
                  "success": true,
                  "timestamp": "2024-12-21T10:30:00Z",
                  "message": "Task soft deleted successfully. It can be restored later."
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}/restore": {
      "post": {
        "tags": ["Tasks"],
        "summary": "Restore a soft-deleted task",
        "description": "Restore a previously soft-deleted task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                },
                "example": {
                  "success": true,
                  "timestamp": "2024-12-21T10:30:00Z",
                  "message": "Task restored successfully",
                  "data": {
                    "id": 1,
                    "title": "Complete project documentation",
                    "description": "Write comprehensive documentation for the task management system",
                    "status": "pending",
                    "priority": "high",
                    "assigned_to": null,
                    "created_by": null,
                    "due_date": "2024-12-25T00:00:00Z",
                    "completed_at": null,
                    "created_at": "2024-12-20T09:00:00Z",
                    "updated_at": "2024-12-21T10:30:00Z",
                    "deleted_at": null
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found or not deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "timestamp": "2024-12-21T10:30:00Z",
                  "error": "Task not found or not deleted",
                  "message": "The task either doesn't exist or is not soft-deleted",
                  "details": {
                    "task_id": 1
                  },
                  "code": "TASK_NOT_DELETED"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/stats": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get task statistics",
        "description": "Get comprehensive task statistics and metrics",
        "responses": {
          "200": {
            "description": "Task statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatsResponse"
                },
                "example": {
                  "success": true,
                  "timestamp": "2024-12-21T10:30:00Z",
                  "message": "Task statistics retrieved successfully",
                  "data": {
                    "total_tasks": 25,
                    "active_tasks": 18,
                    "deleted_tasks": 2,
                    "status_breakdown": {
                      "pending": 8,
                      "in_progress": 6,
                      "completed": 9,
                      "cancelled": 2
                    },
                    "priority_breakdown": {
                      "low": 5,
                      "medium": 12,
                      "high": 6,
                      "urgent": 2
                    },
                    "overdue_tasks": 3,
                    "completion_rate": 36.0,
                    "average_completion_time_days": 4.2
                  }
                }
              }
            }
          }
        }
      }
    },
    "/logs": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get system logs",
        "description": "Retrieve system activity logs with comprehensive filtering and pagination options",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of logs per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 50
            },
            "example": 50
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filter by action type. Supports multiple actions for task operations",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created", "updated", "deleted", "restored", "soft_delete", "force_delete", "bulk_update", "status_change", "assignment_change", "metadata_update"]
            },
            "example": "created"
          },
          {
            "name": "task_id",
            "in": "query",
            "description": "Filter by specific task ID to get logs related to that task",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user ID to get logs for a specific user's actions",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "example": 456
          },
          {
            "name": "level",
            "in": "query",
            "description": "Filter by log level. Useful for debugging and monitoring",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["info", "warning", "error", "debug"]
            },
            "example": "info"
          },
          {
            "name": "source",
            "in": "query",
            "description": "Filter by log source. Identifies the component that generated the log",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 100
            },
            "example": "TaskController"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date for filtering logs (YYYY-MM-DD HH:MM:SS format). Must be before end_date if both are provided",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$"
            },
            "example": "2024-01-01 00:00:00"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date for filtering logs (YYYY-MM-DD HH:MM:SS format). Must be after start_date if both are provided",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$"
            },
            "example": "2024-12-31 23:59:59"
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Field to sort the logs by. Controls the ordering of results",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created_at", "action", "task_id", "user_id", "level"],
              "default": "created_at"
            },
            "example": "created_at"
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "Sort order for the logs. 'desc' shows newest first, 'asc' shows oldest first",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            },
            "example": "desc"
          },
          {
            "name": "include_metadata",
            "in": "query",
            "description": "Include metadata in response such as pagination info and query statistics",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true
          },
          {
            "name": "include_technical",
            "in": "query",
            "description": "Include technical details like execution time, database queries, and system info",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": false
          },
          {
            "name": "include_changes",
            "in": "query",
            "description": "Include change details showing what data was modified (before/after)",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true
          },
          {
            "name": "date_format",
            "in": "query",
            "description": "Format for date fields in the response. ISO8601 is recommended for APIs",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["iso8601", "rfc2822", "human"],
              "default": "iso8601"
            },
            "example": "iso8601"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Get specific log by ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogListResponse"
                }
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of logs",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Page": {
                "description": "Current page number",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Number of logs per page",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Total number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Applied-Filters": {
                "description": "Applied filters as JSON string",
                "schema": {
                  "type": "string"
                }
              },
              "X-Query-Execution-Time": {
                "description": "Query execution time in milliseconds",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Log not found (when using id parameter)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logs/{id}": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get specific log entry",
        "description": "Retrieve details of a specific log entry by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "MongoDB ObjectId of the log entry",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          },
          {
            "name": "include_technical",
            "in": "query",
            "description": "Include technical details",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log entry retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Log"
                        }
                      }
                    }
                  ]
                }
              }
            },
            "headers": {
              "X-Log-ID": {
                "description": "Log entry ID",
                "schema": {
                  "type": "string"
                }
              },
              "X-Retrieved-At": {
                "description": "Timestamp when log was retrieved",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "404": {
            "description": "Log entry not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logs/stats": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get log statistics",
        "description": "Retrieve comprehensive statistics about system activity logs",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date for statistics (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date for statistics (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/LogStatsResponse"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/logs/export": {
      "get": {
        "tags": ["Logs"],
        "summary": "Export logs",
        "description": "Export logs in specified format with filtering options",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "description": "Export format",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["json", "csv", "xlsx"],
              "default": "json"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date for export (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date for export (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filter by action type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created", "updated", "deleted", "restored"]
            }
          },
          {
            "name": "task_id",
            "in": "query",
            "description": "Filter by task ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of exported logs",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000,
              "default": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs exported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "download_url": {
                              "type": "string",
                              "description": "URL to download the exported file"
                            },
                            "format": {
                              "type": "string",
                              "description": "Export format used"
                            },
                            "total_records": {
                              "type": "integer",
                              "description": "Number of records exported"
                            },
                            "generated_at": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Export generation timestamp"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/logs/recent": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get recent logs",
        "description": "Retrieve the most recent log entries",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of recent logs to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "hours",
            "in": "query",
            "description": "Number of hours to look back",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 168,
              "default": 24
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recent logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logs/date-range": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get logs within date range",
        "description": "Retrieve logs within a specific date range with enhanced filtering",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date (YYYY-MM-DD HH:MM:SS)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date (YYYY-MM-DD HH:MM:SS)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of logs per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500,
              "default": 50
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filter by action type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created", "updated", "deleted", "restored"]
            }
          },
          {
            "name": "task_id",
            "in": "query",
            "description": "Filter by task ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs within date range retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid date range",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logs/actions/{action}": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get logs by action",
        "description": "Retrieve logs filtered by specific action type",
        "parameters": [
          {
            "name": "action",
            "in": "path",
            "description": "Action type to filter by",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["created", "updated", "deleted", "restored"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of logs per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500,
              "default": 50
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date for filtering (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date for filtering (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs filtered by action retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid action type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logs/users/{userId}": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get logs by user",
        "description": "Retrieve logs filtered by specific user ID",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID to filter logs by",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of logs per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500,
              "default": 50
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filter by action type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created", "updated", "deleted", "restored"]
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date for filtering (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date for filtering (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logs/tasks/{taskId}": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get logs for specific task",
        "description": "Retrieve all logs related to a specific task",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Task ID to get logs for",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of logs per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500,
              "default": 50
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filter by action type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created", "updated", "deleted", "restored"]
            }
          },
          {
            "name": "include_technical",
            "in": "query",
            "description": "Include technical details",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogListResponse"
                }
              }
            },
            "headers": {
              "X-Task-ID": {
                "description": "Task ID for which logs were retrieved",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logs/tasks/{taskId}/deletions": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get deletion logs for specific task",
        "description": "Retrieve deletion-specific logs for a task",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Task ID to get deletion logs for",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of logs per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task deletion logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logs/deletions/recent": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get recent deletion logs",
        "description": "Retrieve recent deletion activity logs across all tasks",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of recent deletion logs to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "hours",
            "in": "query",
            "description": "Number of hours to look back",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 168,
              "default": 24
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recent deletion logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/logs/deletions/stats": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get deletion statistics",
        "description": "Retrieve comprehensive statistics about deletion activities",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date for statistics (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date for statistics (YYYY-MM-DD)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "total_deletions": {
                              "type": "integer",
                              "description": "Total number of deletion operations"
                            },
                            "unique_tasks_deleted": {
                              "type": "integer",
                              "description": "Number of unique tasks deleted"
                            },
                            "recent_deletions": {
                              "type": "integer",
                              "description": "Deletions in the last 24 hours"
                            },
                            "deletion_trend": {
                              "type": "object",
                              "description": "Deletion trends over time"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/logs/cleanup": {
      "delete": {
        "tags": ["Logs"],
        "summary": "Cleanup old logs",
        "description": "Remove old log entries based on specified criteria (administrative operation)",
        "parameters": [
          {
            "name": "days_old",
            "in": "query",
            "description": "Delete logs older than this many days",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 30,
              "default": 90
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "Only delete logs with specific action",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created", "updated", "deleted", "restored"]
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "description": "Preview what would be deleted without actually deleting",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log cleanup completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "deleted_count": {
                              "type": "integer",
                              "description": "Number of logs deleted"
                            },
                            "criteria": {
                              "type": "object",
                              "description": "Cleanup criteria used"
                            },
                            "dry_run": {
                              "type": "boolean",
                              "description": "Whether this was a dry run"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Task": {
        "type": "object",
        "required": ["id", "title", "status", "priority", "created_at", "updated_at"],
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Unique task identifier"
          },
          "title": {
            "type": "string",
            "example": "Complete project documentation",
            "description": "Task title"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Write comprehensive documentation for the task management system",
            "description": "Detailed task description"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed", "cancelled"],
            "example": "pending",
            "description": "Current task status"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "urgent"],
            "example": "medium",
            "description": "Task priority level"
          },
          "assigned_to": {
            "type": "integer",
            "nullable": true,
            "example": null,
            "description": "ID of the user assigned to this task"
          },
          "created_by": {
            "type": "integer",
            "nullable": true,
            "example": null,
            "description": "ID of the user who created this task"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-12-25T00:00:00Z",
            "description": "Task due date and time"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": null,
            "description": "Date and time when task was completed"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-21T09:00:00Z",
            "description": "Task creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-21T10:30:00Z",
            "description": "Last update timestamp"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": null,
            "description": "Soft delete timestamp (null if not deleted)"
          }
        }
      },
      "TaskCreateRequest": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 255,
            "example": "Complete project documentation",
            "description": "Task title (required)"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Write comprehensive documentation for the task management system",
            "description": "Task description (optional)"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed", "cancelled"],
            "example": "pending",
            "description": "Initial task status (defaults to 'pending')"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "urgent"],
            "example": "medium",
            "description": "Task priority (defaults to 'medium')"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2024-12-25",
            "description": "Task due date (YYYY-MM-DD format)"
          },
          "assigned_to": {
            "type": "integer",
            "nullable": true,
            "example": null,
            "description": "User ID to assign task to"
          }
        }
      },
      "TaskUpdateRequest": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 255,
            "example": "Complete project documentation - Updated",
            "description": "Task title"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Write comprehensive documentation for the task management system with examples",
            "description": "Task description"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed", "cancelled"],
            "example": "in_progress",
            "description": "Task status"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "urgent"],
            "example": "urgent",
            "description": "Task priority"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2024-12-23",
            "description": "Task due date (YYYY-MM-DD format)"
          },
          "assigned_to": {
            "type": "integer",
            "nullable": true,
            "example": null,
            "description": "User ID to assign task to"
          }
        }
      },
      "TaskPatchRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 255,
            "example": "Updated task title",
            "description": "Task title"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Updated task description",
            "description": "Task description"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed", "cancelled"],
            "example": "completed",
            "description": "Task status"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "urgent"],
            "example": "high",
            "description": "Task priority"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2024-12-30",
            "description": "Task due date (YYYY-MM-DD format)"
          },
          "assigned_to": {
            "type": "integer",
            "nullable": true,
            "example": 5,
            "description": "User ID to assign task to"
          }
        }
      },
      "Log": {
        "type": "object",
        "required": ["_id", "action", "task_id", "created_at"],
        "properties": {
          "_id": {
            "type": "string",
            "example": "675a1b2c3d4e5f6789012345",
            "description": "MongoDB ObjectId"
          },
          "action": {
            "type": "string",
            "enum": ["created", "updated", "deleted", "restored"],
            "example": "created",
            "description": "Action performed on the task"
          },
          "task_id": {
            "type": "integer",
            "example": 1,
            "description": "ID of the affected task"
          },
          "task_title": {
            "type": "string",
            "example": "Complete project documentation",
            "description": "Title of the affected task"
          },
          "user_id": {
            "type": "integer",
            "nullable": true,
            "example": null,
            "description": "ID of the user who performed the action"
          },
          "ip_address": {
            "type": "string",
            "example": "127.0.0.1",
            "description": "IP address of the request"
          },
          "user_agent": {
            "type": "string",
            "example": "PostmanRuntime/7.32.1",
            "description": "User agent of the request"
          },
          "changes": {
            "type": "object",
            "description": "Changes made to the task",
            "example": {
              "title": "Complete project documentation",
              "status": "pending",
              "priority": "high"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the request",
            "example": {
              "request_id": "req_123456789",
              "execution_time_ms": 45
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-21T10:30:00Z",
            "description": "Log entry creation timestamp"
          }
        }
      },
      "BaseResponse": {
        "type": "object",
        "required": ["success", "timestamp"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-21T10:30:00Z",
            "description": "Response timestamp"
          }
        }
      },
      "SuccessResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["message"],
            "properties": {
              "success": {
                "type": "boolean",
                "enum": [true]
              },
              "message": {
                "type": "string",
                "example": "Operation completed successfully",
                "description": "Success message"
              }
            }
          }
        ]
      },
      "TaskResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        ]
      },
      "TaskListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "required": ["data", "meta"],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Task"
                }
              },
              "meta": {
                "type": "object",
                "required": ["pagination"],
                "properties": {
                  "pagination": {
                    "$ref": "#/components/schemas/Pagination"
                  },
                  "applied_filters": {
                    "type": "object",
                    "description": "Filters applied to the query"
                  },
                  "data_type": {
                    "type": "string",
                    "example": "collection",
                    "description": "Type of data returned"
                  },
                  "data_count": {
                    "type": "integer",
                    "example": 2,
                    "description": "Number of items in current page"
                  }
                }
              }
            }
          }
        ]
      },
      "TaskStatsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "total_tasks": {
                    "type": "integer",
                    "example": 25,
                    "description": "Total number of tasks"
                  },
                  "active_tasks": {
                    "type": "integer",
                    "example": 18,
                    "description": "Number of non-deleted tasks"
                  },
                  "deleted_tasks": {
                    "type": "integer",
                    "example": 2,
                    "description": "Number of soft-deleted tasks"
                  },
                  "status_breakdown": {
                    "type": "object",
                    "properties": {
                      "pending": {"type": "integer", "example": 8},
                      "in_progress": {"type": "integer", "example": 6},
                      "completed": {"type": "integer", "example": 9},
                      "cancelled": {"type": "integer", "example": 2}
                    }
                  },
                  "priority_breakdown": {
                    "type": "object",
                    "properties": {
                      "low": {"type": "integer", "example": 5},
                      "medium": {"type": "integer", "example": 12},
                      "high": {"type": "integer", "example": 6},
                      "urgent": {"type": "integer", "example": 2}
                    }
                  },
                  "overdue_tasks": {
                    "type": "integer",
                    "example": 3,
                    "description": "Number of overdue tasks"
                  },
                  "completion_rate": {
                    "type": "number",
                    "format": "float",
                    "example": 36.0,
                    "description": "Percentage of completed tasks"
                  },
                  "average_completion_time_days": {
                    "type": "number",
                    "format": "float",
                    "example": 4.2,
                    "description": "Average time to complete tasks in days"
                  }
                }
              }
            }
          }
        ]
      },
      "LogListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "required": ["data", "meta"],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Log"
                }
              },
              "meta": {
                "type": "object",
                "required": ["pagination"],
                "properties": {
                  "pagination": {
                    "$ref": "#/components/schemas/Pagination"
                  },
                  "applied_filters": {
                    "type": "object",
                    "description": "Filters applied to the query"
                  },
                  "data_type": {
                    "type": "string",
                    "example": "collection",
                    "description": "Type of data returned"
                  },
                  "data_count": {
                    "type": "integer",
                    "example": 2,
                    "description": "Number of items in current page"
                  }
                }
              }
            }
          }
        ]
      },
      "LogStatsResponse": {
        "type": "object",
        "properties": {
          "total_logs": {
            "type": "integer",
            "example": 1250,
            "description": "Total number of log entries"
          },
          "logs_by_action": {
            "type": "object",
            "properties": {
              "created": {
                "type": "integer",
                "example": 45,
                "description": "Number of creation logs"
              },
              "updated": {
                "type": "integer", 
                "example": 120,
                "description": "Number of update logs"
              },
              "deleted": {
                "type": "integer",
                "example": 8,
                "description": "Number of deletion logs"
              },
              "restored": {
                "type": "integer",
                "example": 3,
                "description": "Number of restoration logs"
              }
            }
          },
          "logs_by_timeframe": {
            "type": "object",
            "properties": {
              "last_hour": {
                "type": "integer",
                "example": 12,
                "description": "Logs in the last hour"
              },
              "last_24_hours": {
                "type": "integer",
                "example": 85,
                "description": "Logs in the last 24 hours"
              },
              "last_7_days": {
                "type": "integer",
                "example": 320,
                "description": "Logs in the last 7 days"
              },
              "last_30_days": {
                "type": "integer",
                "example": 890,
                "description": "Logs in the last 30 days"
              }
            }
          },
          "most_active_tasks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "task_id": {
                  "type": "integer",
                  "example": 1
                },
                "task_title": {
                  "type": "string",
                  "example": "Complete project documentation"
                },
                "log_count": {
                  "type": "integer",
                  "example": 15
                }
              }
            },
            "description": "Tasks with the most activity"
          },
          "average_logs_per_day": {
            "type": "number",
            "format": "float",
            "example": 28.5,
            "description": "Average number of logs per day"
          },
          "oldest_log_date": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-01T10:30:00Z",
            "description": "Timestamp of the oldest log"
          },
          "newest_log_date": {
            "type": "string",
            "format": "date-time", 
            "example": "2024-12-21T10:30:00Z",
            "description": "Timestamp of the newest log"
          },
          "date_range": {
            "type": "object",
            "properties": {
              "start_date": {
                "type": "string",
                "format": "date-time",
                "description": "Start date for statistics calculation"
              },
              "end_date": {
                "type": "string",
                "format": "date-time",
                "description": "End date for statistics calculation"
              }
            }
          }
        }
      },
      "ApiOverviewResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Task Management System API"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          },
          "api_version": {
            "type": "string",
            "example": "v1.0"
          },
          "status": {
            "type": "string",
            "example": "active"
          },
          "environment": {
            "type": "string",
            "example": "local"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-21T10:30:00Z"
          },
          "documentation": {
            "type": "object",
            "properties": {
              "main": {"type": "string", "example": "http://localhost:8000/api/v1/docs"},
              "info": {"type": "string", "example": "http://localhost:8000/api/v1/info"},
              "openapi": {"type": "string", "example": "http://localhost:8000/api/v1/openapi.json"}
            }
          },
          "endpoints": {
            "type": "object",
            "properties": {
              "api_v1": {
                "type": "object",
                "properties": {
                  "tasks": {"type": "string", "example": "http://localhost:8000/api/v1/tasks"},
                  "logs": {"type": "string", "example": "http://localhost:8000/api/v1/logs"}
                }
              },
              "legacy": {
                "type": "object",
                "properties": {
                  "tasks": {"type": "string", "example": "http://localhost:8000/tasks"},
                  "logs": {"type": "string", "example": "http://localhost:8000/logs"}
                }
              }
            }
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["versioned_api", "soft_deletes", "audit_logging", "filtering_pagination", "validation"]
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "healthy"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-21T10:30:00Z"
          },
          "services": {
            "type": "object",
            "properties": {
              "database": {"type": "string", "example": "connected"},
              "mongodb": {"type": "string", "example": "connected"}
            }
          }
        }
      },
      "ErrorResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "required": ["error", "message"],
            "properties": {
              "success": {
                "type": "boolean",
                "enum": [false]
              },
              "error": {
                "type": "string",
                "example": "Task not found",
                "description": "Error type or title"
              },
              "message": {
                "type": "string",
                "example": "The requested task with ID 999 was not found",
                "description": "Human-readable error message"
              },
              "details": {
                "type": "object",
                "description": "Additional error details",
                "example": {
                  "task_id": 999
                }
              },
              "code": {
                "type": "string",
                "example": "TASK_NOT_FOUND",
                "description": "Machine-readable error code"
              }
            }
          }
        ]
      },
      "ValidationErrorResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": ["Validation failed"]
              },
              "code": {
                "type": "string",
                "enum": ["VALIDATION_ERROR"]
              },
              "details": {
                "type": "object",
                "description": "Field-specific validation errors",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": {
                  "title": ["The title field is required."],
                  "status": ["The status field must be one of: pending, in_progress, completed, cancelled."]
                }
              }
            }
          }
        ]
      },
      "Pagination": {
        "type": "object",
        "required": ["current_page", "per_page", "total", "total_pages"],
        "properties": {
          "current_page": {
            "type": "integer",
            "example": 1,
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "example": 50,
            "description": "Number of items per page"
          },
          "total": {
            "type": "integer",
            "example": 2,
            "description": "Total number of items"
          },
          "total_pages": {
            "type": "integer",
            "example": 1,
            "description": "Total number of pages"
          },
          "has_next_page": {
            "type": "boolean",
            "example": false,
            "description": "Whether there is a next page"
          },
          "has_previous_page": {
            "type": "boolean",
            "example": false,
            "description": "Whether there is a previous page"
          },
          "next_page": {
            "type": "integer",
            "nullable": true,
            "example": null,
            "description": "Next page number (null if no next page)"
          },
          "previous_page": {
            "type": "integer",
            "nullable": true,
            "example": null,
            "description": "Previous page number (null if no previous page)"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Tasks",
      "description": "Task management operations - CRUD operations, filtering, soft deletes, and restoration"
    },
    {
      "name": "Logs",
      "description": "System activity logs and audit trail"
    },
    {
      "name": "System",
      "description": "System health checks and API information"
    }
  ]
}